section .data 
    msg db 'Hello from stack!', 0 
section .bss 
    result resb 1 

section .text 
    global _start 

_start: 
    ; Зберігаємо значення на стеку 
    push rax             ; Зберігаємо вміст регістру RAX у стек 
    push rbx             ; Зберігаємо значення регістру RBX у стек 

    ; Логіка роботи програми 
    mov rax, 1           ; Вказуємо номер системного виклику для виведення (sys_write) 
    mov rdi, 1           ; Вказуємо файл (1 - стандартний вихід) 
    mov rsi, msg         ; Адреса повідомлення 
    mov rdx, 18          ; Довжина повідомлення 
    syscall              ; Виконуємо системний виклик 

    ; Відновлюємо значення регістрів 
    pop rbx              ; Відновлюємо регістр RBX 
    pop rax              ; Відновлюємо регістр RAX 

    ; Завершення програми
    mov rax, 60          ; Вказуємо номер системного виклику для завершення програми (sys_exit) 
    xor rdi, rdi         ; Вказуємо код завершення 0 
    syscall              ; Виконуємо системний виклик 

 